#########################################################################
###
###
### OpenSteer -- Steering Behaviors for Autonomous Characters
###
### Copyright (c) 1999, 2000, 2002-2003, Sony Computer Entertainment America
### Original authors: Bret Mogilefsky and Tyler Daniel, minor tweaks by Craig
### Reynolds <craig_reynolds@playstation.sony.com>
###
### Permission is hereby granted, free of charge, to any person obtaining a
### copy of this software and associated documentation files (the "Software"),
### to deal in the Software without restriction, including without limitation
### the rights to use, copy, modify, merge, publish, distribute, sublicense,
### and/or sell copies of the Software, and to permit persons to whom the
### Software is furnished to do so, subject to the following conditions:
###
### The above copyright notice and this permission notice shall be included in
### all copies or substantial portions of the Software.
###
### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
### THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
### FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
### DEALINGS IN THE SOFTWARE.
###
###
##########################################################################
##########################################################################
### You shouldn't need to change anything below here from project 
### to project.  If you do, let me know so I can fold it back into the
### template! -Bret
##########################################################################
##########################################################################


##########################################################################
### Tools and Tool Locations
##########################################################################

# should we print the commands used to build targets?
ifeq ($(strip $(PRINT_CMDS)),0)
SILENCE		= @
endif

# What tools to use.
PREFIX		= /usr/bin/
AR		= $(SILENCE)$(PREFIX)ar
AS		= $(SILENCE)$(PREFIX)gcc
APP		= $(PREFIX)gasp
CC		= $(SILENCE)$(PREFIX)gcc
LD		= $(SILENCE)$(PREFIX)g++
DVPASM		= $(PREFIX)dvp-as
OBJDUMP		= $(SILENCE)$(PREFIX)objdump
RM		= /bin/rm -fr
SHELL		= /bin/sh
CPP		= g++ -E
CDEP		= $(PREFIX)gcc -M
DSEDB		= $(SCEDIR)/bin/dsedb

# How to run the executable...
RUN		= $(TARGETOBJ) $(RUNARGS) $($(BUILDNAME)_RUNARGS)

# ...or have the debug session launched in a new window... Useful if you're
# running from within an editor or are outputting color codes, etc. that
# require a terminal to interpret them.
XRUN		= $(TERM) -fg white -bg black -T "PSX2: Executing $(TARGET)" -sl 5000 -sb -g 140x40 -e bash -c "($(RUN); echo 'Press Enter to continue'; read)"

# the program that generates dependency rules for vsm files; needs to be in your path!
VSMDEP		= $(PS2STUFF)/tools/vsmdeps/vsmdeps.pl

# a program to pre-process vsm files; needs to be in your path!
VPP		= $(PS2STUFF)/tools/vu_reg_manager/vu_reg_manager.pl

# Stewart Sargaison's vu microcode optimizer
VCL		= vcl

# how to print out messages (Compiling somefile.cpp...)
PRINTMSG	= @echo -e -n

##########################################################################
### Determine the current build
##########################################################################

# some useful variables
colon:= :
empty:=
space:= $(empty) $(empty)

# Look for any build names specified on the command line
BUILDNAME	:= $(filter $(BUILDNAMES), $(MAKECMDGOALS))

# make sure that exactly one or zero build names are specified
ifneq ($(words $(BUILDNAME)),0)
ifneq ($(words $(BUILDNAME)),1)
ERROR		+= Error: Please specify only one build name.\\n
endif
endif

# strip out any remaining spaces
BUILDNAME	:= $(subst $(space),$(empty),$(BUILDNAME))

# If no build was specified, use the default build
ifeq ($(words $(BUILDNAME)),0)
BUILDNAME	:= $(DEFAULTBUILD)
endif

# If only a build name was specified on the command line, we need the rule for
# the build to depend on the target 'all.'  Conversely, if the user specified
# a target on the command line make shouldn't do anything when it processes
# the build name as a target.
# SO, check to see if the user specified a goal on the command line
CMDLINE 	:= $(filter-out $(BUILDNAMES), $(MAKECMDGOALS))
ifneq ($(words $(CMDLINE)),0)
USER_SPEC_GOAL	:= $(space) # the value is not important -- just need to define
endif

##### Added 10/02/01 by jbates - allows different source files for different
#####                            builds.

SRCS		+= $($(BUILDNAME)_SRCS)

##########################################################################
### Build directory names and search paths
##########################################################################

# Where to look for include files.
HDRDIR		+= $(SRCDIRS) $(INCDIRS)

# Where to look for libraries.
LIBDIRS		+= 

# Where to generate/find dependency files.
DEPDIR		= $(DEPDIRBASE)_$(BUILDNAME)

# Where to generate/find object files.
OBJDIR		= $(OBJDIRBASE)_$(BUILDNAME)

###
# Note: May need to change the vpath directives below to take into account multiple builds!
###

# Find headers automatically.
vpath %.h	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(INCDIRS))

# Find source automatically.
vpath %.c	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))
vpath %.C	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))
vpath %.cc	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))
vpath %.cpp	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))

# Find libraries automatically.
vpath %.a	.:$(subst $(space),$(colon),$(LIBDIRS))

# Find assembly code automatically.
vpath %.s	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))
vpath %.vsm	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))
vpath %.vcl	.:$(subst $(space),$(colon),$(SRCDIRS)):$(subst $(space),$(colon),$(LIBDIRS))

# Find object files automatically
vpath %.o	:$(OBJDIR):$(subst $(space),$(colon),$(SRCDIRS))
vpath %.vo	:$(OBJDIR):$(subst $(space),$(colon),$(SRCDIRS))
vpath %.do	:$(OBJDIR):$(subst $(space),$(colon),$(SRCDIRS))

##########################################################################
### Build list of objects to make
##########################################################################

# Filter out C and C++ files so we can build them with different flags.
CSRCS		+= $(filter %.c, $(SRCS))
CXXSRCS		+= $(filter %.C, $(SRCS))
CCSRCS		+= $(filter %.cc, $(SRCS))
CPPSRCS		+= $(filter %.cpp, $(SRCS))
VSMSRCS		+= $(filter %.vsm, $(SRCS))
DSMSRCS		+= $(filter %.dsm, $(SRCS))
VCLSRCS		+= $(filter %.vcl, $(SRCS))

# Generate the full list of object files.
AUTOOBJS	+= $(CPPSRCS:.cpp=.o) $(CCSRCS:.cc=.o) $(CXXSRCS:.C=.o)
AUTOOBJS	+= $(CSRCS:.c=.o)
AUTOOBJS	+= $(VSMSRCS:.vsm=.vo)
AUTOOBJS	+= $(DSMSRCS:.dsm=.do)
AUTOOBJS	+= $(VCLSRCS:.vcl=.vo)

ALLOBJS		= $(AUTOOBJS) $(OBJS)

# The actual target binary name
TARGETOBJ	= $(addprefix $(OBJDIR)/, $(TARGET))

##########################################################################
### Compiler flags
##########################################################################

# Optimization flags.
OPTFLAGS	+= $($(BUILDNAME)_OPTFLAGS) $($(*)_OPTFLAGS) $($(*)_$(BUILDNAME)_OPTFLAGS)

# Debugging flags to pass to the compiler
DEBUGFLAGS	+= $($(BUILDNAME)_DEBUGFLAGS) $($(*)_DEBUGFLAGS) $($(*)_$(BUILDNAME)_DEBUGFLAGS)

# Make these lists into useful stuff.
INCFLAGS	= $(addprefix -I, $(INCDIRS) $($(BUILDNAME)_INCDIRS) $($(*)_INCDIRS) $($(*)_$(BUILDNAME)_INCDIRS))
DEFFLAGS	= $(addprefix -D, $(DEFINES) $($(BUILDNAME)_DEFINES) $($(*)_DEFINES) $($(*)_$(BUILDNAME)_DEFINES))
LIBFLAGS	= $(addprefix -L, $(LIBDIRS) $($(BUILDNAME)_LIBDIRS) $($(*)_LIBDIRS) $($(*)_$(BUILDNAME)_LIBDIRS))

# Flags for compiling C files.
CFLAGS		= $(DEBUGFLAGS) $(OPTFLAGS) $(INCFLAGS) $(DEFFLAGS)

# Flags for compiling C++ files.
CXXFLAGS	= $(DEBUGFLAGS) $(OPTFLAGS) $(INCFLAGS) $(DEFFLAGS)

# Flags for the assemblers. -xassembler-with-cpp -Wa,-al
ASFLAGS		= -c  $(INCFLAGS)
DVPASMFLAGS	= -g

# Flags for the linker.  -nostartfiles
LDFLAGS		= $(DEBUGFLAGS) $(LIBFLAGS)

##########################################################################
### Libraries
##########################################################################

# The LIBS variable can contain long or short library names, for example
# 'packet' or 'libpacket.a'.  We'd like to produce a command line that
# uses the form '-lpacket' for libraries given in short form, so let's
# make a couple new variables to help with this

# first, separate the short and long names

SHORT_LIBS	:= $(filter-out lib%.a, $(LIBS))
LONG_LIBS	:= $(filter lib%.a, $(LIBS))

# we want make to find all the libraries using vpath for the dependencies,
# and for that it needs the full filename (eg, libpacket.a),
# so let's create yet another variable to hold the expanded filenames

SHORT_LIBS_EXP	:= $(patsubst %, lib%.a, $(SHORT_LIBS))

##########################################################################
### Messages
##########################################################################

# should we print status messages?
ifeq ($(strip $(PRINT_MSGS)),1)
COMP_MSG	= Compiling $<...\\n
ASM_MSG		= Assembling $<...\\n
VCL_MSG		= Optimizing $<...\\n
LINK_MSG	= Linking $@...\\n
AR_MSG		= Creating archive $@...\\n
RUN_MSG		= Executing $(TARGETOBJ)...\\n
XRUN_MSG	= $(RUN_MSG)
endif

##########################################################################
### Rules
##########################################################################

# This line lets us properly have files called "clean" or "tags"  in the 
# directory if we really want to.
.PHONY: clean tags preBuild.phony rmPrebuilddone.phony checkError.phony $(BUILDNAMES)
.SUFFIXES:

$(BUILDNAME): all ; 

all: $(TARGETOBJ)

$(TARGETOBJ): $(ALLOBJS) $(LONG_LIBS)

# Below: need to add the OBJDIR/ prefix instead of just using $^ for
# objects that have been deleted because they will not be found in OBJDIR
# and will be named as if they were in the current directory. But we won't
# touch the rest (just filter out the things we know how to build from $^).
$(basename $(TARGETOBJ)).elf:
	$(PRINTMSG) $(LINK_MSG)
	$(LD) -o $@ \
	$(addprefix $(OBJDIR)/,$(AUTOOBJS)) \
	$(OBJS) \
	$(filter $(addprefix %, $(LONG_LIBS)), $^)	\
	$(LDFLAGS)					\
	$(addprefix -l, $(SHORT_LIBS))			\
	-lm
	$(PRINTMSG) \\n

#	$(filter-out %.vo, $(filter-out %.do, $(filter-out %.o, $^))) \

$(basename $(TARGETOBJ)).a:
	$(PRINTMSG) $(AR_MSG)
	$(AR) -r $@ $(addprefix $(OBJDIR)/,$(AUTOOBJS)) $(OBJS)
	$(PRINTMSG) \\n

$(OBJDIR):
	-@mkdir $(OBJDIR)

%.o : %.c
	$(PRINTMSG) $(COMP_MSG)
	$(CC) $(CFLAGS) -o $(OBJDIR)/$@ -c $< > $(OBJDIR)/$*.lst

%.o : %.cpp
	$(PRINTMSG) $(COMP_MSG)
	$(CC) $(CXXFLAGS) -o $(OBJDIR)/$@ -c $< > $(OBJDIR)/$*.lst

%.o : %.cc
	$(PRINTMSG) $(COMP_MSG)
	$(CC) $(CXXFLAGS) -o $(OBJDIR)/$@ -c $< > $(OBJDIR)/$*.lst

%.o : %.C
	$(PRINTMSG) $(COMP_MSG)
	$(CC) $(CXXFLAGS) -o $(OBJDIR)/$@ -c $< > $(OBJDIR)/$*.lst

%.o : %.s
	$(PRINTMSG) $(ASM_MSG)
	$(AS) $(ASFLAGS) -o $@ $< > $(OBJDIR)/$*.lst

# example render.vcl:
# sed strips out #includes and #defines and outputs objdir/render.vcl
# gasp processes and pipes to sed
# sed replaces [number] with _number, and [xyzw] with xyzw, and '.include "filename"' with
#   '.include "../<dir of first dep>/filename"' and outputs objdir/render2.vcl
# vcl optimizes and outputs render_vcl.vsm
#
# disabled:
#   greps filter out only errors and warnings, except warnings about the iTable being empty.
#   cat is there on the end because make misinterprets the exit code of grep as an error
#   sed replaces the mFLOW* labels output by vcl with mFLOW*_render to make them local to the file.
%_vcl.vsm: %.vcl
	$(PRINTMSG) $(VCL_MSG)
	$(SILENCE)sed 's/#include[ 	]\+.\+// ; s/#define[ 	]\+.\+// ; s|\(\.include[ 	]\+\)"\(.\+\)"|\1"$(<D)/\2"|' \
	$< > $(OBJDIR)/$(<F)
	$(SILENCE)$(APP) -c ';' $(OBJDIR)/$(<F) \
	| sed 's/\[\([0-9]\)\]/_\1/g ; s/\[\([w-zW-Z]\)\]/\1/g' - > $(OBJDIR)/$(*F)2.vcl
	$(SILENCE)$(VCL) $(VCLARGS) $($(BUILDNAME)_VCLARGS) -o$(<D)/$*_vcl.vsm $(OBJDIR)/$(*F)2.vcl

# the variable <filenamestem>_INCLUDES is generated by vsmdeps.pl.. Just using the headers listed on
# the dependency list like we were before wasn't strictly correct..
%.vo: %.vsm
	$(PRINTMSG) $(ASM_MSG)
	$(SILENCE)$(VPP) $< \
	| sed 's/#include[ \t]\+.\+//g' - \
	| $(CPP) -P $(INCFLAGS) $(DEFFLAGS) $(addprefix -imacros , $($(*F)_INCLUDES)) - > $(OBJDIR)/$(*F)_preprocessed.vsm
	$(SILENCE)$(DVPASM) $(DVPASMFLAGS) -o $(OBJDIR)/$@ $(OBJDIR)/$(*F)_preprocessed.vsm

# we don't need to do anything other than run cpp on files generated by vcl
%.vo: %_vcl.vsm
	$(PRINTMSG) $(ASM_MSG)
	$(SILENCE)$(CPP) -P $(INCFLAGS) $(DEFFLAGS) $(addprefix -imacros , $($(*F)_INCLUDES)) $< \
	| $(DVPASM) $(DVPASMFLAGS) -o $(OBJDIR)/$@ -


%.do: %.dsm
	$(PRINTMSG) $(ASM_MSG)
	$(SILENCE)$(VPP) $< \
	| sed 's/#include[ \t]\+.\+//g' - \
	| $(CPP) -P $(INCFLAGS) $(DEFFLAGS) $(addprefix -imacros , $(filter %.h, $^)) - \
	| $(DVPASM) $(DVPASMFLAGS) -o $(OBJDIR)/$@ -

run: all
	$(PRINTMSG) $(RUN_MSG)
	$(SILENCE)$(RUN)

xrun: all
	$(PRINTMSG) $(XRUN_MSG)
	$(SILENCE)$(XRUN)

# Optional: generate source-browsing tags for Emacs
tags: TAGS
TAGS: $(SRCS)
	etags -C -S $(addsuffix /*.h,$(INCDIRS)) $^ 
#	etags -C -S *.h $(addsuffix /*.h,$(INCDIRS)) $^ 

# Get rid of intermediate files.
clean:
	-$(RM) $(OBJDIR) $(DEPDIR) *.map *.lst core *.dis TAGS prebuilddone

# Get rid of intermediate files (clean) plus files which you probably don't
# want in a "distributable" tree.
distclean: clean
	-$(RM) *~

# Check for errors and make sure the OBJDIR directory exists.
Makefile: checkError.phony $(OBJDIR)

###############################################################################
# Rules for automatically generating and using dependencies.
###############################################################################

$(DEPDIR):
	-@mkdir $(DEPDIR)

$(DEPDIR)/%.d: %.c
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(CDEP) $(CFLAGS) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.d: %.cpp
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(CDEP) $(CXXFLAGS) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.d: %.cc
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(CDEP) $(CXXFLAGS) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.d: %.C
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(CDEP) $(CXXFLAGS) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.dv: %.vsm
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(VSMDEP) $< $(INCFLAGS) \
		| sed '\''s/\($*\)\.vo[ :]*/\1.vo $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.dd: %.dsm
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(VSMDEP) $< $(INCFLAGS) \
		| sed '\''s/\($*\)\.do[ :]*/\1.do $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

$(DEPDIR)/%.dl: %.vcl
	@echo "Making dependencies for $<..."
	$(SILENCE)$(SHELL) -ec '[ -d $(DEPDIR) ] || mkdir $(DEPDIR) ; \
		$(VSMDEP) $< $(INCFLAGS) \
		| sed '\''s/\($*\)\.vo[ :]*/\1.vo $(subst /,\/,$@) : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

# List of all the dependency files we want to build
DEPS		= $(addprefix $(DEPDIR)/, $(CPPSRCS:.cpp=.d) $(CCSRCS:.cc=.d) $(CXXSRCS:.C=.d) $(CSRCS:.c=.d)
DEPS		+= $(VSMSRCS:.vsm=.dv) $(DSMSRCS:.dsm=.dd) $(VCLSRCS:.vcl=.dl))

# Cause those dependency makefiles to be built and silently include them.
ifeq ($(empty),$(findstring clean, $(MAKECMDGOALS)))
ifndef ERROR
-include $(DEPS)
endif
endif

###############################################################################
# Weird rules to force make to do things it wasn't meant to...
###############################################################################

# if an error has been found make a rule to echo it and quit, otherwise do nothing
ifdef ERROR
checkError.phony: ; $(PRINTMSG) $(ERROR) ; exit -1
else
checkError.phony: ; 
endif

# this is here as a lousy hack to prevent recent versions of make from executing the rule to
# make preBuild.phony twice...  It creates the temporary file 'prebuilddone' which will be included
# the second time the Makefile is parsed to define a variable that prevents preBuild.phony from
# being included.  The file is removed by rmPrebuilddone.phony.
ifeq ($(empty),$(findstring clean, $(MAKECMDGOALS)))
-include prebuilddone
endif

# the rule to generate prebuilddone
prebuilddone : ; @echo -e "PREBUILD = done\\nMakefile: rmPrebuilddone.phony" > prebuilddone
# a rule to delete the file 'prebuilddone'
rmPrebuilddone.phony : ; @rm -f prebuilddone

# force the preBuild.phony rule to be executed before doing anything else:
ifneq ($(PREBUILD),done)
ifeq ($(empty),$(findstring clean, $(MAKECMDGOALS)))
-include preBuild.phony
endif
endif

# stuff to do before trying to build the target
# first check to see if we need to call make in another directory
ifneq ($(words $(MAKEPARENTS)),0)
CUR_DIR := $(shell pwd)
preBuild.phony:
	@$(foreach MAKEPARENT, $(MAKEPARENTS), cd $(MAKEPARENT) && $(MAKE) $(BUILDNAME) --no-print-directory; cd $(CUR_DIR); )
	$(PRINTMSG) \\n------------------------- Building $(TARGET)\; Current build = $(BUILDNAME)\\n\\n
else
preBuild.phony:
	$(PRINTMSG) \\n------------------------- Building $(TARGET)\; Current build = $(BUILDNAME)\\n\\n
endif


