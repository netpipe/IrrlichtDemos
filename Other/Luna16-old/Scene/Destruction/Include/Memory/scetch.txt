//
//	mxSolidCollisionShape
//
class mxSolidCollisionShape : public btConcaveShape {
public:
			mxSolidCollisionShape();
			~mxSolidCollisionShape();

	// overrides ( btConcaveShape )
	void processAllTriangles( btTriangleCallback* callback, const btVector3& aabbMin, const btVector3& aabbMax ) const;
};

mxSolidCollisionShape::mxSolidCollisionShape()
{}

mxSolidCollisionShape::~mxSolidCollisionShape()
{}

void mxSolidCollisionShape::processAllTriangles( btTriangleCallback* callback, const btVector3& aabbMin, const btVector3& aabbMax ) const
{
}

void processAllTriangles( btTriangleCallback* callback, const btVector3& aabbMin, const btVector3& aabbMax ) const
{
}




















#if 0
	::irr::scene::ISceneNode * node = GRenderWorld->SceneManager->addMeshSceneNode(
		GRenderWorld->SceneManager->getMesh( filename ) );
	node->setDebugDataVisible( ::irr::scene::E_DEBUG_SCENE_TYPE::EDS_BBOX_ALL );
	//	node->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );
	node->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/STEELPLT.jpg" ) );
	//	node->setMaterialTexture( 1, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/PANS.jpg" ) );
#endif


	// create a terrain
//	::irr::scene::mxTerrain_SceneNode * terrain = new ::irr::scene::mxTerrain_SceneNode();


#if 0	// test scene node
	::irr::scene::CBox_SceneNode * box = new ::irr::scene::CBox_SceneNode( 500, 10, 100 );
	box->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );
	box->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/STEELPLT.jpg" ) );
	box->drop();
#endif


#if 0
	::irr::scene::IMesh * pMesh = GRenderWorld->SceneManager->getMesh( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/M4a1an Pws4.3DS" );
	m_pSceneNode2 = GRenderWorld->SceneManager->addMeshSceneNode(
		pMesh,
		NULL, -1,
		Vec3D( 900,500,900 ) );

	//m_pSceneNode2->setScale( Vec3D( 10,10,10 ) );

	m_pSceneNode2->setDebugDataVisible( ::irr::scene::E_DEBUG_SCENE_TYPE::EDS_BBOX_ALL );
	m_pSceneNode2->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );

//	u32 num = pMesh->getMeshBufferCount();
	for ( u32 i = 0; i < pMesh->getMeshBufferCount(); i++ )
	{
		::irr::scene::IMeshBuffer * pMeshBuffer = pMesh->getMeshBuffer( i );
		pMeshBuffer->getMaterial().Lighting = false;
	}

	pMesh->getMeshBuffer( 0 )->getMaterial().TextureLayer[ 0 ].Texture = GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/1.jpg" );
	pMesh->getMeshBuffer( 1 )->getMaterial().TextureLayer[ 0 ].Texture = GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/2.jpg" );
	pMesh->getMeshBuffer( 2 )->getMaterial().TextureLayer[ 0 ].Texture = GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/3.jpg" );
	pMesh->getMeshBuffer( 3 )->getMaterial().TextureLayer[ 0 ].Texture = GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/4.jpg" );
	pMesh->getMeshBuffer( 4 )->getMaterial().TextureLayer[ 0 ].Texture = GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Weapons/M4a1an Pws4/M4a1an Pws4/34.jpg" );

	m_pSceneNode2->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Images/Textures/Color/Grey.jpg" ) );
#endif




#if 0 // building
	::irr::scene::ISceneNode * node = GRenderWorld->SceneManager->addAnimatedMeshSceneNode(
		GRenderWorld->SceneManager->getMesh( PATH_TO_MEDIA "/Models/Test/model-noname.3DS" ) );
	//node->setDebugDataVisible( ::irr::scene::E_DEBUG_SCENE_TYPE::EDS_BBOX_ALL );
//	node->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );
	node->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/STEELPLT.jpg" ) );
//	node->setMaterialTexture( 1, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/PANS.jpg" ) );
#endif

#if 0 // test Irrlicht terrain
	scene::ITerrainSceneNode* terrainSceneNode = GRenderWorld->SceneManager->addTerrainSceneNode(
		PATH_TO_MEDIA "From Irrlicht SDK/terrain-heightmap.bmp",
		0,										// parent node
		-1,										// node id
		core::vector3df( 0.f, 0.f, 0.f ),		// position
		core::vector3df( 0.f, 0.f, 0.f ),		// rotation
		core::vector3df( 200.f, 4.4f, 200.f ),	// scale
		video::SColor ( 255, 255, 255, 255 ),	// vertexColor,
		9,										// maxLOD
		scene::ETPS_129,						// patchSize
		4										// smoothFactor
	);

	if ( terrainSceneNode )
	{
		terrainSceneNode->setMaterialFlag( video::EMF_LIGHTING, false );
		terrainSceneNode->setMaterialType( video::EMT_DETAIL_MAP );

		terrainSceneNode->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "From Irrlicht SDK/terrain-texture.jpg") );
		terrainSceneNode->setMaterialTexture( 1, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "From Irrlicht SDK/detailmap3.jpg") );

		terrainSceneNode->scaleTexture( 90.0f, 90.0f );
	}
#endif

#if 0 // space shuttle
	::irr::scene::ISceneNode * node = GRenderWorld->SceneManager->addAnimatedMeshSceneNode(
		GRenderWorld->SceneManager->getMesh( PATH_TO_MEDIA "/Models/Test/31StarTrekShuttle3d.3DS" ) );
	//node->setDebugDataVisible( ::irr::scene::E_DEBUG_SCENE_TYPE::EDS_BBOX_ALL );
	node->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );
	node->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/STEELPLT.jpg" ) );
	node->setMaterialTexture( 1, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Models/Test/PANS.jpg" ) );
#endif

#if 0 // Quake-style map
	GSystem->FileSystem->addZipFileArchive( PATH_TO_MEDIA "From Irrlicht SDK/map-20kdm2.pk3" );
	::irr::scene::IAnimatedMeshSceneNode * level = GRenderWorld->SceneManager->addAnimatedMeshSceneNode(
		GRenderWorld->SceneManager->getMesh("20kdm2.bsp") );
	::irr::scene::IAnimatedMesh * mesh = level->getMesh();
	GCommon->DebugPrint( "%u frames, %u meshbuffers\n", mesh->getFrameCount(), mesh->getMesh(0)->getMeshBufferCount() );
	level->setDebugDataVisible( ::irr::scene::E_DEBUG_SCENE_TYPE::EDS_BBOX_ALL );
#endif

#if 0
	// This test shows how to bring Irrlicht to its knees. TODO: in this case occlusion culling algorithm would help.
	// Irrlicht cannot load large textures ( 4.5 Mb ).
	const u32 numSpheres = 10;
	for ( u32 i = 0; i < numSpheres; i++ )
	{
		::irr::scene::ISceneNode * sphere = GRenderWorld->SceneManager->addSphereSceneNode( 200, 1024, NULL, i, Vec3D( 0, i * 10, i * 400 ) );
		sphere->setMaterialFlag( ::irr::video::EMF_LIGHTING, false );
		sphere->setMaterialTexture( 0, GRenderWorld->Driver->getTexture( PATH_TO_MEDIA "Images/Textures/Test/LIMESTO3.jpg" ) );
	}
#endif









































struct Heap
{
    void* heap_start;
    void* heap_end;
    size_t max_end;

    Heap(size_t size)
    {
        heap_start = malloc(size);
        heap_end = heap_start;
        max_end = size + (size_t) heap_start;
    }

    ~Heap()
    {
        ::free(heap_start);
    }

    void* allocate(size_t bytes)
    {

        size_t new_end = ((size_t) heap_end) + bytes;

        if( new_end > max_end )
            throw std::bad_alloc();

        void* output = heap_end;
        heap_end = (void*) new_end;
        return output;
    }

}










/* 


A* Algorithm Implementation using STL is
Copyright (C)2001-2005 Justin Heyes-Jones


Permission is given by the author to freely redistribute and 
include this code in any program as long as this credit is 
given where due.
 
  COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN "AS IS" BASIS, 
  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
  INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED CODE 
  IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE
  OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND 
  PERFORMANCE OF THE COVERED CODE IS WITH YOU. SHOULD ANY COVERED 
  CODE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL 
  DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY 
  NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF 
  WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE 
  OF ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER
  THIS DISCLAIMER.
 
  Use at your own risk!






  FixedSizeAllocator class
  Copyright 2001 Justin Heyes-Jones


  This class is a constant time O(1) memory manager for objects of 
  a specified type. The type is specified using a template class.


  Memory is allocated from a fixed size buffer which you can specify in the
  class constructor or use the default.


  Using GetFirst and GetNext it is possible to iterate through the elements
  one by one, and this would be the most common use for the class. 


  I would suggest using this class when you want O(1) add and delete
  and you don't do much searching, which would be O(n). Structures such as binary 
  trees can be used instead to get O(logn) access time.


*/


#ifndef FSA_H
#define FSA_H


#include <string.h>
#include <stdio.h>


template <class USER_TYPE> class FixedSizeAllocator
{


public: 
        // Constants
        enum
        {
                FSA_DEFAULT_SIZE = 100
        };


        // This class enables us to transparently manage the extra data 
        // needed to enable the user class to form part of the double-linked
        // list class
        struct FSA_ELEMENT
        {
                USER_TYPE UserType;
                
                FSA_ELEMENT *pPrev;
                FSA_ELEMENT *pNext;
        };


public: // methods
        FixedSizeAllocator( unsigned int MaxElements = FSA_DEFAULT_SIZE ) :
        m_MaxElements( MaxElements ),
        m_pFirstUsed( NULL )
        {
                // Allocate enough memory for the maximum number of elements


                char *pMem = new char[ m_MaxElements * sizeof(FSA_ELEMENT) ];


                m_pMemory = (FSA_ELEMENT *) pMem; 


                // Set the free list first pointer
                m_pFirstFree = m_pMemory;


                // Clear the memory
                memset( m_pMemory, 0, sizeof( FSA_ELEMENT ) * m_MaxElements );


                // Point at first element
                FSA_ELEMENT *pElement = m_pFirstFree;


                // Set the double linked free list
                for( unsigned int i=0; i<m_MaxElements; i++ )
                {
                        pElement->pPrev = pElement-1;
                        pElement->pNext = pElement+1;


                        pElement++;
                }


                // first element should have a null prev
                m_pFirstFree->pPrev = NULL;
                // last element should have a null next
                (pElement-1)->pNext = NULL;


        }




        ~FixedSizeAllocator()
        {
                // Free up the memory
                delete [] (char *) m_pMemory;
        }


        // Allocate a new USER_TYPE and return a pointer to it 
        USER_TYPE *alloc()
        {


                FSA_ELEMENT *pNewNode = NULL;


                if( !m_pFirstFree )
                {
                        return NULL;
                }
                else
                {
                        pNewNode = m_pFirstFree;
                        m_pFirstFree = pNewNode->pNext;


                        // if the new node points to another free node then
                        // change that nodes prev free pointer...
                        if( pNewNode->pNext )
                        {
                                pNewNode->pNext->pPrev = NULL;
                        }


                        // node is now on the used list


                        pNewNode->pPrev = NULL; // the allocated node is always first in the list


                        if( m_pFirstUsed == NULL )
                        {
                                pNewNode->pNext = NULL; // no other nodes
                        }
                        else
                        {
                                m_pFirstUsed->pPrev = pNewNode; // insert this at the head of the used list
                                pNewNode->pNext = m_pFirstUsed;
                        }


                        m_pFirstUsed = pNewNode;
                }       
                
                return reinterpret_cast<USER_TYPE*>(pNewNode);
        }


        // Free the given user type
        // For efficiency I don't check whether the user_data is a valid
        // pointer that was allocated. I may add some debug only checking
        // (To add the debug check you'd need to make sure the pointer is in 
        // the m_pMemory area and is pointing at the start of a node)
        void free( USER_TYPE *user_data )
        {
                FSA_ELEMENT *pNode = reinterpret_cast<FSA_ELEMENT*>(user_data);


                // manage used list, remove this node from it
                if( pNode->pPrev )
                {
                        pNode->pPrev->pNext = pNode->pNext;
                }
                else
                {
                        // this handles the case that we delete the first node in the used list
                        m_pFirstUsed = pNode->pNext;
                }


                if( pNode->pNext )
                {
                        pNode->pNext->pPrev = pNode->pPrev;
                }


                // add to free list
                if( m_pFirstFree == NULL ) 
                {
                        // free list was empty
                        m_pFirstFree = pNode;
                        pNode->pPrev = NULL;
                        pNode->pNext = NULL;
                }
                else
                {
                        // Add this node at the start of the free list
                        m_pFirstFree->pPrev = pNode;
                        pNode->pNext = m_pFirstFree;
                        m_pFirstFree = pNode;
                }


        }


        // For debugging this displays both lists (using the prev/next list pointers)
        void Debug()
        {
                printf( "free list " );


                FSA_ELEMENT *p = m_pFirstFree;
                while( p )
                {
                        printf( "%x!%x ", p->pPrev, p->pNext );
                        p = p->pNext;
                }
                printf( "\n" );


                printf( "used list " );


                p = m_pFirstUsed;
                while( p )
                {
                        printf( "%x!%x ", p->pPrev, p->pNext );
                        p = p->pNext;
                }
                printf( "\n" );
        }


        // Iterators


        USER_TYPE *GetFirst()
        {
                return reinterpret_cast<USER_TYPE *>(m_pFirstUsed);
        }


        USER_TYPE *GetNext( USER_TYPE *node )
        {
                return reinterpret_cast<USER_TYPE *>
                        (
                                (reinterpret_cast<FSA_ELEMENT *>(node))->pNext
                        );
        }


public: // data


private: // methods


private: // data


        FSA_ELEMENT *m_pFirstFree;
        FSA_ELEMENT *m_pFirstUsed;
        unsigned int m_MaxElements;
        FSA_ELEMENT *m_pMemory;


};


#endif // defined FSA_H