
#include "../header/sceneLoader.h"
#include <cstring>
#include <math.h>
	extern SDL_Surface* gScreenSurface;

void meshLoader::processMesh(aiMesh* meshV, const aiScene* scene)
{

	std::vector<vertexData> data;
	std::vector<unsigned int> indices;
	std::vector<textureData> textures; 
	aiColor4D col;
	aiMaterial* mat=scene->mMaterials[meshV->mMaterialIndex];
	aiGetMaterialColor(mat,AI_MATKEY_COLOR_DIFFUSE,&col);
	vector3d defaultColor(col.r,col.g,col.b);
		
	for(int i=0;i<meshV->mNumVertices;i++)
	{
			vertexData tmp;
			vector3d tmpVec;
			
			//position
			tmpVec.x=meshV->mVertices[i].x;
			tmpVec.y=meshV->mVertices[i].y;
			tmpVec.z=meshV->mVertices[i].z;

			tmp.position=tmpVec;
			
			//normals
			tmpVec.x=meshV->mNormals[i].x;
			tmpVec.y=meshV->mNormals[i].y;
			tmpVec.z=meshV->mNormals[i].z;
			tmp.normal=tmpVec;			
			
			
			//tangent
			if(meshV->mTangents)
			{
				tmpVec.x=meshV->mTangents[i].x;
				tmpVec.y=meshV->mTangents[i].y;
				tmpVec.z=meshV->mTangents[i].z;
			}else{
				tmpVec.x=1.0;
				tmpVec.y=tmpVec.z=0;
			}
			tmp.tangent=tmpVec;		
			
			
			//colors
			if(meshV->mColors[0])
			{
				//!= material color
				tmpVec.x=meshV->mColors[0][i].r;
				tmpVec.y=meshV->mColors[0][i].g;
				tmpVec.z=meshV->mColors[0][i].b;				
			}else{
				tmpVec=defaultColor;
			}
			tmp.color=tmpVec;
			
			//color
			if(meshV->mTextureCoords[0])
			{
				tmpVec.x=meshV->mTextureCoords[0][i].x;
				tmpVec.y=meshV->mTextureCoords[0][i].y;				
			}else{
				tmpVec.x=tmpVec.y=tmpVec.z=0.0;
			}
			tmp.U=tmpVec.x;
			tmp.V=tmpVec.y;
			data.push_back(tmp);
	}


	for(int i=0;i<meshV->mNumFaces;i++)
	{
		aiFace face=meshV->mFaces[i];
		for(int j=0;j<face.mNumIndices;j++) //0..2
		{
			indices.push_back(face.mIndices[j]);
		}
	}
	
	
	for(int i=0;i<mat->GetTextureCount(aiTextureType_DIFFUSE);i++)
	{
		aiString str;
		mat->GetTexture(aiTextureType_DIFFUSE,i,&str);
		textureData tmp;
		//tmp.id=loadTexture(str.C_Str());
		tmp.id = 0;
		tmp.type=0;
		textures.push_back(tmp);
	}
	meshes.push_back(new mesh(&data,&indices,&textures));
	
}

/*

unsigned int meshLoader::loadTexture(const char* filename)
{
	unsigned int num;
	glGenTextures(1,&num);
	std::string file_name = "../models/textures/";
	file_name += filename;
	SDL_Surface* img=IMG_Load(file_name.c_str());
	if(img==NULL)
	{
		//std::cout << "img was not loaded" << std::endl;
		return -1;
	}
	//SDL_PixelFormat form={NULL,32,4,0,0,0,0,0,0,0,0,0xff000000,0x00ff0000,0x0000ff00,0x000000ff,0,255};
	SDL_Surface* img2=SDL_ConvertSurface( img, gScreenSurface->format,0 );
	if(img2==NULL)
	{
		//std::cout << "img2 was not loaded" << std::endl;
		return -1;		
	}
	glBindTexture(GL_TEXTURE_2D,num);		
	
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR); 
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR); 
	glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,img2->w,img2->h,0,GL_BGRA,GL_UNSIGNED_BYTE,img2->pixels);		
	SDL_FreeSurface(img);
	SDL_FreeSurface(img2);
	return num;	
}
*/

meshLoader::meshLoader(const char* filename)
{
	Assimp::Importer importer;
	m_scene=importer.ReadFile(filename, aiProcess_GenSmoothNormals | aiProcess_Triangulate | aiProcess_CalcTangentSpace | aiProcess_FlipUVs | aiProcess_JoinIdenticalVertices);
	if(m_scene->mFlags==AI_SCENE_FLAGS_INCOMPLETE || !m_scene->mRootNode)
	{
		std::cout << "The file wasn't successfuly opened " << filename << std::endl;
		return; 
	}

	for(int i = 0; i< m_scene->mNumMeshes; i++)
		{
			aiMesh* meshT = m_scene->mMeshes[i];
			processMesh(meshT, m_scene);
		}
}

meshLoader::~meshLoader()
{
	for(int i=0;i<meshes.size();i++)
		delete meshes[i];
}

void meshLoader::draw(unsigned int programId)
{
	for(int i=0;i<meshes.size();i++)
		meshes[i]->draw(programId);
	
}


