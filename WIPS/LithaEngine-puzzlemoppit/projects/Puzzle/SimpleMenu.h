
#ifndef SIMPLE_MENU_H
#define SIMPLE_MENU_H

#include "Litha.h"

class Positioner;

// This SimpleMenu stuff is mostly copied from the menu code in MainState.
// It's a cleaner version that maybe I can reuse in the future.

class SimpleMenu : public IWantEvents
// : public IReferenceCounted
// would only be reference counted if was managed by a manager class
{
	s32 id;
	
	ISound2D *menuSound;
	core::stringc mouseOverSound;
	
	std::map<gui::IGUIElement *, bool> mouseOverStates;
	
	// Halt operation of the menu.
	// Called after any button has been clicked.
	// (these are assumed to be single use buttons)
	void Shutdown();
	
protected:
	IEngine *engine;
	IrrlichtDevice *device;
	
	Positioner *positioner;
	
public:
	// A unique Id must be given which will identify events generated by this menu.
	SimpleMenu(s32 uniqueId);
	virtual ~SimpleMenu();
	
	// removeMenuOnClick unused. Would be useful in future if there is ever a MenuManager
	// class, or if menus are managed by Litha Engine. Menu could then auto remove itself
	// by calling a manager method.
	virtual void AddItem(core::stringw name, s32 uniqueItemId, bool removeMenuOnClick = false);
	
	virtual void AddImageItem(io::path imageName, s32 uniqueItemId, bool removeMenuOnClick = false);
	
	// Space between items. Might be horizontal or vertical, depending on the menu type.
	virtual void SetItemGap(u32 gap);
	
	// Should be called after all items have been added; creates GUI elements and calculates their positions.
	virtual void Finalise();
	
	virtual void SetMouseOverSound(const c8 *sound);
	
	// Return the ID given when this menu was created.
	s32 GetId();
	
	const std::vector<gui::IGUIElement *> &GetElements();
	
	// used internally
	void OnEvent(const Event &event);
};

// A horizontal list of choices that appears in the centre of the screen.
class SimpleHorizontalMenu : public SimpleMenu
{
public:
	SimpleHorizontalMenu(s32 uniqueId, s32 yPos = -1, s32 spacing = 50, bool vertCentred = true); // if yPos is not set, uses half screen height
	
	// A text heading that appears above the menu choices. e.g. "Are you sure?" type text.
	void SetHeading(core::stringw text);
};

class SimpleVerticalMenu : public SimpleMenu
{
public:
	SimpleVerticalMenu(s32 uniqueId, f32 marginBottom = 0.1);
};

class SimpleEitherSideToggleMenu : public SimpleMenu
{
public:
	SimpleEitherSideToggleMenu(s32 uniqueId);
	
	void Enable(bool left, bool right);
};

#endif
